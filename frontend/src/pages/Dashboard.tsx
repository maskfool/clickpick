import { useState, useRef, useEffect } from "react";
import { useAuthStore } from "../stores/authStore";
import {
  Sparkles,
  Upload,
  Download,
  RefreshCw,
  Wand2,
  Play,
  RotateCcw,
  Zap,
  Star,
  Heart,
  Bookmark,
} from "lucide-react";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { ChatArea } from "../components/ChatArea";
import { VideoCategories, VideoCategory } from "../components/VideoCategories";
import { thumbnailsAPI } from "@/services/api";

const MAX_REFINEMENTS = 5;

const Dashboard = () => {
  const { logout } = useAuthStore();

  const [prompt, setPrompt] = useState("");
  const [uploadedImage, setUploadedImage] = useState<string | null>(null); // base64 preview
  const [referenceImage, setReferenceImage] = useState<string | null>(null); // relativePath from backend
  const [generatedThumbnail, setGeneratedThumbnail] = useState<string | null>(null);
  const [thumbnailId, setThumbnailId] = useState<string | null>(null);
  const [refinementCount, setRefinementCount] = useState(0);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [selectedRatio, setSelectedRatio] = useState<'video' | 'shorts' | null>(null);
  const [imageDataUrl, setImageDataUrl] = useState<string | null>(null); // Store base64 image data
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Load latest image from localStorage on component mount
  useEffect(() => {
    const savedImage = localStorage.getItem('clickpick-latest-image');
    if (savedImage) {
      setImageDataUrl(savedImage);
    }
  }, []);

  // ✅ Upload image
  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (file.size > 10 * 1024 * 1024) {
      toast.error("File size must be less than 10MB");
      return;
    }

    try {
      // local preview
      const reader = new FileReader();
      reader.onload = (e) => setUploadedImage(e.target?.result as string);
      reader.readAsDataURL(file);

      // upload to backend
      const res = await thumbnailsAPI.uploadReference(file);
      if (res.data?.success) {
        setReferenceImage(res.data.data.relativePath);
        toast.success("Reference image uploaded!");
      } else {
        toast.error("Failed to upload reference image");
      }
    } catch (err: any) {
      console.error("Upload failed:", err);
      toast.error("Image upload failed");
    }
  };

  // ✅ Generate
  const generateThumbnail = async () => {
    if (!prompt.trim()) {
      toast.error("Please enter a prompt for your thumbnail");
      return;
    }
    if (!selectedCategory) {
      toast.error("Please select a category first");
      return;
    }

    setIsGenerating(true);
    try {
      const res = await thumbnailsAPI.create({
        title: "AI Generated Thumbnail",
        description: "Generated by AI",
        category: selectedCategory,
        originalPrompt: prompt,
        referenceImage: referenceImage || undefined,
      });

      if (res.data?.success) {
        const thumbnail = res.data.data.thumbnail;
        setGeneratedThumbnail(thumbnail.imageUrl);
        setThumbnailId(thumbnail._id);
        setRefinementCount(0); // reset counter
        setSelectedRatio(null); // reset ratio selection
        
        // Store image data for download
        try {
          // Convert the image URL to base64 and store it
          const imageResponse = await fetch(thumbnail.imageUrl.startsWith('/') 
            ? `${window.location.origin}${thumbnail.imageUrl}` 
            : thumbnail.imageUrl
          );
          const imageBlob = await imageResponse.blob();
          const reader = new FileReader();
          reader.onload = () => {
            const base64Data = reader.result as string;
            setImageDataUrl(base64Data);
            // Also store in localStorage as backup
            localStorage.setItem('clickpick-latest-image', base64Data);
          };
          reader.readAsDataURL(imageBlob);
        } catch (error) {
          console.error("Failed to store image data:", error);
        }
        
        toast.success("Thumbnail generated!");
      } else {
        toast.error("Generation failed");
      }
    } catch (err: any) {
      console.error("Generate error:", err);
      toast.error("Failed to generate thumbnail");
    } finally {
      setIsGenerating(false);
    }
  };

  // ✅ Refine
  const handleRefineRequest = async (userPrompt: string) => {
    if (!thumbnailId) {
      toast.error("No thumbnail to refine yet!");
      return;
    }
    if (refinementCount >= MAX_REFINEMENTS) {
      toast.error("You’ve reached the max refinements (5).");
      return;
    }

    try {
      const res = await thumbnailsAPI.edit(thumbnailId, {
        userPrompt,
        referenceImage: referenceImage || undefined,
      });

      if (res.data?.success) {
        const updatedThumb = res.data.data.thumbnail;
        setGeneratedThumbnail(updatedThumb.imageUrl);
        setPrompt(updatedThumb.finalPrompt);
        setRefinementCount((c) => c + 1);
        
        // Store updated image data for download
        try {
          // Convert the image URL to base64 and store it
          const imageResponse = await fetch(updatedThumb.imageUrl.startsWith('/') 
            ? `${window.location.origin}${updatedThumb.imageUrl}` 
            : updatedThumb.imageUrl
          );
          const imageBlob = await imageResponse.blob();
          const reader = new FileReader();
          reader.onload = () => {
            const base64Data = reader.result as string;
            setImageDataUrl(base64Data);
            // Also store in localStorage as backup
            localStorage.setItem('clickpick-latest-image', base64Data);
          };
          reader.readAsDataURL(imageBlob);
        } catch (error) {
          console.error("Failed to store updated image data:", error);
        }
        
        toast.success(`Thumbnail refined (${refinementCount + 1}/${MAX_REFINEMENTS})`);
      } else {
        toast.error("Refinement failed");
      }
    } catch (err: any) {
      console.error("Refine error:", err);
      toast.error("Failed to refine thumbnail");
    }
  };

  // ✅ Keep prompt synced
  const handlePromptRefinement = (refinedPrompt: string) => {
    setPrompt(refinedPrompt);
  };

  // ✅ Download generated thumbnail from localStorage
  const handleDownload = async () => {
    let imageData = imageDataUrl;
    
    // Fallback to localStorage if state doesn't have the image
    if (!imageData) {
      imageData = localStorage.getItem('clickpick-latest-image');
      if (!imageData) {
        toast.error("No image to download");
        return;
      }
    }

    try {
      // Convert base64 data URL to blob
      const response = await fetch(imageData);
      const blob = await response.blob();
      
      // Create download link
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = `clickpick-thumbnail-${Date.now()}.png`;
      
      // Trigger download
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Clean up
      window.URL.revokeObjectURL(url);
      
      toast.success("Image downloaded successfully!");
    } catch (error) {
      console.error("Download failed:", error);
      toast.error("Failed to download image. Please try again.");
    }
  };



  return (
    <div className="min-h-screen bg-gradient-hero relative overflow-hidden text-foreground">
      {/* Background Glows */}
      <div className="absolute inset-0 bg-gradient-glow" />
      <div className="absolute top-1/4 right-1/4 w-96 h-96 bg-gradient-primary rounded-full blur-3xl opacity-20 animate-pulse" />
      <div className="absolute bottom-1/4 left-1/4 w-72 h-72 bg-gradient-accent rounded-full blur-3xl opacity-20 animate-pulse delay-1000" />

      {/* Header */}
      <header className="relative z-10 p-4 border-b border-border/50">
        <div className="flex items-center justify-between max-w-7xl mx-auto">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-primary rounded-xl flex items-center justify-center shadow-primary">
              <Sparkles className="w-6 h-6 text-primary-foreground" />
            </div>
            <div>
              <h1 className="text-xl font-bold text-yellow-400">ThumbnailAI Studio</h1>
              <p className="text-sm text-gray-400">Professional AI Creation Suite</p>
            </div>
          </div>

          <div className="flex items-center gap-3">
            <Badge className="bg-gradient-accent text-accent-foreground px-3 py-1">
              Pro
            </Badge>
            <Button
              onClick={logout}
              variant="outline"
              size="sm"
              className="border-border/50 hover:border-primary hover:shadow-primary"
            >
              Logout
            </Button>
          </div>
        </div>
      </header>

      {/* Main 3-column Layout */}
      <div className="relative z-10 max-w-7xl mx-auto px-6 py-6 grid grid-cols-12 gap-6 min-h-0">
        {/* LEFT PANEL */}
        <div className="col-span-3 space-y-4 overflow-y-auto pr-2 h-[calc(100vh-120px)]">
          <Card className="bg-card/80 backdrop-blur-xl border-border/50 shadow-card">
            <CardContent>
              <VideoCategories
                onCategorySelect={(cat: VideoCategory) => setSelectedCategory(cat.id)}
                selectedCategory={selectedCategory}
              />
            </CardContent>
          </Card>

          <Card className="bg-card/80 backdrop-blur-xl border-border/50 shadow-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <Wand2 className="w-5 h-5 text-yellow-400" />
                AI Generator
              </CardTitle>
              {/* Video/Shorts Ratio Selection */}
              {/* <div className="flex items-center gap-2 mt-3">
                <Button
                  variant={selectedRatio === 'video' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => {
                    setSelectedRatio('video');
                    if (prompt.trim()) {
                      setPrompt(prompt + ' 16:9 ratio');
                    } else {
                      setPrompt('16:9 ratio');
                    }
                  }}
                  className={`text-xs px-3 py-1 h-8 ${
                    selectedRatio === 'video' 
                      ? 'bg-gradient-primary text-white' 
                      : 'bg-transparent border-border/50 text-gray-400 hover:border-primary hover:text-primary'
                  }`}
                >
                  Video (16:9)
                </Button>
                <Button
                  variant={selectedRatio === 'shorts' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => {
                    setSelectedRatio('shorts');
                    if (prompt.trim()) {
                      setPrompt(prompt + ' 9:16 ratio');
                    } else {
                      setPrompt('9:16 ratio');
                    }
                  }}
                  className={`text-xs px-3 py-1 h-8 ${
                    selectedRatio === 'shorts' 
                      ? 'bg-gradient-primary text-white' 
                      : 'bg-transparent border-border/50 text-gray-400 hover:border-primary hover:text-primary'
                  }`}
                >
                  Shorts (9:16)
                </Button>
              </div> */}
            </CardHeader>
            <CardContent className="space-y-3">
              <Textarea
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                placeholder="Describe your perfect YouTube thumbnail..."
                className="min-h-[100px] bg-input/80 backdrop-blur-sm border-border/50 text-white"
              />
              <Button
                onClick={generateThumbnail}
                disabled={isGenerating || !prompt.trim()}
                className="w-full bg-gradient-primary hover:shadow-primary transition"
              >
                {isGenerating ? (
                  <>
                    <RefreshCw className="w-4 h-4 animate-spin mr-2" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Play className="w-4 h-4 mr-2" />
                    Generate
                  </>
                )}
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* CENTER PANEL */}
        <div className="col-span-6 flex flex-col space-y-4 h-[calc(100vh-120px)]">
          {/* Thumbnail Display - Fixed height */}
          <Card className="h-[55%] min-h-[350px] bg-black/50 backdrop-blur-xl border shadow-float flex items-center justify-center relative overflow-hidden">
            {generatedThumbnail ? (
              <div className="relative w-full h-full flex items-center justify-center p-4">
                <img
                  src={generatedThumbnail}
                  alt="Generated"
                  className="max-w-full max-h-full object-contain rounded-xl border border-border/30 shadow-card"
                />
                {/* <div className="absolute -top-3 left-1/2 -translate-x-1/2 flex items-center gap-2 bg-card/90 backdrop-blur-md border border-border/50 rounded-full px-3 py-1 shadow-float">
                  <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                    <RotateCcw className="w-3 h-3" />
                  </Button>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    className="h-6 w-6 p-0 hover:text-primary transition-colors" 
                    onClick={handleDownload}
                    title="Download thumbnail"
                  >
                    <Download className="w-3 h-3" />
                  </Button>
                </div> */}
              </div>
            ) : (
              <div className="text-center space-y-4 p-8">
                <div className="relative">
                  <div className="w-20 h-20 bg-gradient-primary rounded-full flex items-center justify-center mx-auto shadow-primary">
                    <Sparkles className="w-10 h-10 text-primary-foreground" />
                  </div>
                  <div className="absolute -inset-4 bg-gradient-primary rounded-full blur-2xl opacity-20 animate-pulse" />
                </div>
                <h3 className="text-xl font-bold text-white">Ready to Create?</h3>
                <p className="text-gray-400 max-w-sm mx-auto">
                  Select a category and start generating your perfect YouTube thumbnail.
                </p>
                <div className="flex items-center justify-center gap-4 text-sm text-gray-400">
                  <div className="flex items-center gap-1">
                    <Zap className="w-4 h-4 text-yellow-400" /> Fast
                  </div>
                  <span>•</span>
                  <div className="flex items-center gap-1">
                    <Star className="w-4 h-4 text-pink-400" /> Quality
                  </div>
                </div>
              </div>
            )}
          </Card>

          {/* Chat Area - Flexible height with proper scrolling */}
          <div className="flex-1 min-h-[250px] h-[40%] overflow-hidden">
            <ChatArea
              onPromptRefinement={handlePromptRefinement}
              onRefineRequest={handleRefineRequest}
              currentPrompt={prompt}
            />
          </div>
        </div>

        {/* RIGHT PANEL */}
        <div className="col-span-3 space-y-4 h-[calc(100vh-120px)] overflow-y-auto">
          <Card className="bg-card/80 backdrop-blur-xl border-border/50 shadow-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <Upload className="w-5 h-5 text-pink-400" />
                Upload Image
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div
                onClick={() => fileInputRef.current?.click()}
                className="border-2 border-dashed border-border/50 rounded-xl p-6 text-center cursor-pointer hover:border-primary/50 hover:bg-primary/5 transition"
              >
                {uploadedImage ? (
                  <img
                    src={uploadedImage}
                    alt="Uploaded"
                    className="mx-auto h-32 object-cover rounded-lg"
                  />
                ) : (
                  <p className="text-sm text-gray-400">Drop or click to upload</p>
                )}
              </div>
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleImageUpload}
                className="hidden"
              />
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;